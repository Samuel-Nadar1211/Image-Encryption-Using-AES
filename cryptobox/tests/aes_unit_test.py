import unittest
from cryptobox.aes import g, keyExpansion, addRoundKey, subBytes, shiftRows, mixColumns, cipher, decipher, invSubBytes, invShiftRows, inv_mix_columns

class TestAESFunctions(unittest.TestCase):

    def setUp(self):
        self.key = [15, 21, 113, 201, 71, 217, 232, 89, 12, 183, 173, 214, 175, 127, 103, 152]
        self.expanded_key = [[15, 21, 113, 201], [71, 217, 232, 89], [12, 183, 173, 214], [175, 127, 103, 152], [220, 144, 55, 176], [155, 73, 223, 233], [151, 254, 114, 63], [56, 129, 21, 167], [210, 201, 107, 183], [73, 128, 180, 94], [222, 126, 198, 97], [230, 255, 211, 198], [192, 175, 223, 57], [137, 47, 107, 103], [87, 81, 173, 6], [177, 174, 126, 192], [44, 92, 101, 241], [165, 115, 14, 150], [242, 34, 163, 144], [67, 140, 221, 80], [88, 157, 54, 235], [253, 238, 56, 125], [15, 204, 155, 237], [76, 64, 70, 189], [113, 199, 76, 194], [140, 41, 116, 191], [131, 229, 239, 82], [207, 165, 169, 239], [55, 20, 147, 72], [187, 61, 231, 247], [56, 216, 8, 165], [247, 125, 161, 74], [72, 38, 69, 32], [243, 27, 162, 215], [203, 195, 170, 114], [60, 190, 11, 56], [253, 13, 66, 203], [14, 22, 224, 28], [197, 213, 74, 110], [249, 107, 65, 86], [180, 142, 243, 82], [186, 152, 19, 78], [127, 77, 89, 32], [134, 38, 24, 118]]

    def test_g(self):
        w = [0xe6, 0xff, 0xd3, 0xc6]
        expected = [0x12, 0x66, 0xb4, 0x8e]  # After applying g(0)
        g(w, 3)
        self.assertEqual(w, expected)

    def test_keyExpansion(self):
        expanded_key = keyExpansion(self.key)
        self.assertEqual(expanded_key, self.expanded_key)

    def test_addRoundKey(self):
        state = [[0xb1, 0xc1, 0x0b, 0xcc],
                 [0xba, 0xf3, 0x8b, 0x07],
                 [0xf9, 0x1f, 0x6a, 0xc3],
                 [0x1d, 0x19, 0x24, 0x5c]]
        round = 3
        addRoundKey(state, round, self.expanded_key)
        expected = [[0x71, 0x48, 0x5c, 0x7d],
                    [0x15, 0xdc, 0xda, 0xa9],
                    [0x26, 0x74, 0xc7, 0xbd],
                    [0x24, 0x7e, 0x22, 0x9c]]
        self.assertEqual(state, expected)

    def test_subBytes(self):
        state =  [[0x71, 0x48, 0x5c, 0x7d],
                  [0x15, 0xdc, 0xda, 0xa9],
                  [0x26, 0x74, 0xc7, 0xbd],
                  [0x24, 0x7e, 0x22, 0x9c]]
        subBytes(state)
        expected = [[0xa3, 0x52, 0x4a, 0xff],
                    [0x59, 0x86, 0x57, 0xd3],
                    [0xf7, 0x92, 0xc6, 0x7a],
                    [0x36, 0xf3, 0x93, 0xde]]
        self.assertEqual(state, expected)

    def test_invSubBytes(self):
        state =  [[0xa3, 0x52, 0x4a, 0xff],
                    [0x59, 0x86, 0x57, 0xd3],
                    [0xf7, 0x92, 0xc6, 0x7a],
                    [0x36, 0xf3, 0x93, 0xde]]
        invSubBytes(state)
        expected = [[0x71, 0x48, 0x5c, 0x7d],
                   [0x15, 0xdc, 0xda, 0xa9],
                   [0x26, 0x74, 0xc7, 0xbd],
                   [0x24, 0x7e, 0x22, 0x9c]]
        self.assertEqual(state, expected)

    def test_shiftRows(self):
        state =   [[0xa3, 0x52, 0x4a, 0xff],
                   [0x59, 0x86, 0x57, 0xd3],
                   [0xf7, 0x92, 0xc6, 0x7a],
                   [0x36, 0xf3, 0x93, 0xde]]
        shiftRows(state)
        expected = [[0xa3, 0x52, 0x4a, 0xff],
                    [0x86, 0x57, 0xd3, 0x59],
                    [0xc6, 0x7a, 0xf7, 0x92],
                    [0xde, 0x36, 0xf3, 0x93]]
        self.assertEqual(state, expected)

    def test_invShiftRows(self):
        state = [[0xa3, 0x52, 0x4a, 0xff],
                    [0x86, 0x57, 0xd3, 0x59],
                    [0xc6, 0x7a, 0xf7, 0x92],
                    [0xde, 0x36, 0xf3, 0x93]]
        invShiftRows(state)
        expected =   [[0xa3, 0x52, 0x4a, 0xff],
                   [0x59, 0x86, 0x57, 0xd3],
                   [0xf7, 0x92, 0xc6, 0x7a],
                   [0x36, 0xf3, 0x93, 0xde]]
        
        self.assertEqual(state, expected)

    def test_mixColumns(self):
        state =  [[0xa3, 0x52, 0x4a, 0xff],
                    [0x86, 0x57, 0xd3, 0x59],
                    [0xc6, 0x7a, 0xf7, 0x92],
                    [0xde, 0x36, 0xf3, 0x93]]
        mixColumns(state)
        expected = [[0xd4, 0x11, 0xfe, 0x0f],
                    [0x3b, 0x44, 0x06, 0x73],
                    [0xcb, 0xab, 0x62, 0x37],
                    [0x19, 0xb7, 0x07, 0xec]]
        self.assertEqual(state, expected)

    def test_inv_mix_columns(self):
        state =  [[0xd4, 0x11, 0xfe, 0x0f],
                    [0x3b, 0x44, 0x06, 0x73],
                    [0xcb, 0xab, 0x62, 0x37],
                    [0x19, 0xb7, 0x07, 0xec]]
        inv_mix_columns(state)
        expected = [[0xa3, 0x52, 0x4a, 0xff],
                    [0x86, 0x57, 0xd3, 0x59],
                    [0xc6, 0x7a, 0xf7, 0x92],
                    [0xde, 0x36, 0xf3, 0x93]]
        self.assertEqual(state, expected)

    def test_cipher(self):
        plaintext = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
                     0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]
        key = [0x0f, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59,
               0x0c, 0xb7, 0xad, 0xd6, 0xaf, 0x7f, 0x67, 0x98]
        expected_ciphertext = [0xff, 0x0b, 0x84, 0x4a, 0x08, 0x53, 0xbf, 0x7c,
                               0x69, 0x34, 0xab, 0x43, 0x64, 0x14, 0x8f, 0xb9]
        ciphertext = cipher(plaintext, key)
        self.assertEqual(ciphertext, expected_ciphertext)

    def test_decipher(self):
        ciphertext = [0xff, 0x0b, 0x84, 0x4a, 0x08, 0x53, 0xbf, 0x7c,
                    0x69, 0x34, 0xab, 0x43, 0x64, 0x14, 0x8f, 0xb9]
        key = [0x0f, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59,
               0x0c, 0xb7, 0xad, 0xd6, 0xaf, 0x7f, 0x67, 0x98]
        expected_plaintext = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
                     0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]
        plaintext = decipher(ciphertext, key)
        self.assertEqual(plaintext, expected_plaintext)


if __name__ == '__main__':
    unittest.main()
